##original python code#######
# while True:
#     board = input().split()
#     if board == "#":
#         break
#     board += input().split()
#     board = list(map(lambda x: [x], board))
#     go = True
#     a = 0
#     while go:
#         a += 1
#         go = False
#         for b, stack in enumerate(board):
#             if b < len(board) - 3:
#                 if stack[-1][0] == board[b + 3][-1][0] or stack[-1][1] == board[b + 3][-1][1]:
#                     stack.append(board[b + 3].pop(-1))
#                     if not board[b + 3]:
#                         board.pop(b + 3)
#                     go = True
#                     break
#             if b < len(board) - 1:
#                 if stack[-1][0] == board[b + 1][-1][0] or stack[-1][1] == board[b + 1][-1][1]:
#                     stack.append(board[b + 1].pop(-1))
#                     if not board[b + 1]:
#                         board.pop(b + 1)
#                     go = True
#                     break
#     print(len(board))
#
###########################



#include<iostream>
#include<string>
#include<stack>
#include<vector>
using namespace std;

bool matches(string & a, string & b) {
    return a[0] == b[0] || a[1] == b[1];
}
int main() {
    string card;
    while (cin >> card && card != "#") {
        vector < stack < string > > piles(52);
        piles[0].push(card);
        for (int i = 1; i < piles.size(); i++) {
            cin >> card;
            piles[i].push(card);
        }

        for (int i = 0; i < piles.size(); i++) {
            if (i - 3 >= 0 && matches(piles[i - 3].top(), piles[i].top())) {
                piles[i - 3].push(piles[i].top());
                piles[i].pop();
                if (piles[i].empty()) {
                    piles.erase(piles.begin() + i);
                }
                i = 0;
            } else if (i - 1 >= 0 && matches(piles[i - 1].top(), piles[i].top())) {
                piles[i - 1].push(piles[i].top());
                piles[i].pop();
                if (piles[i].empty()) {
                    piles.erase(piles.begin() + i);
                }
                i = 0;
            }
        }

        cout << piles.size() << " pile";
        if (piles.size() != 1) cout << 's';
        cout << " remaining: ";
        for (int i = 0; i < piles.size() - 1; i++) {
            cout << piles[i].size() << ' ';
        }
        cout << piles.back().size() << endl;
    }
    return 0;
}
